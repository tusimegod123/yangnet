{"remainingRequest":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js!/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js","dependencies":[{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js","mtime":1628227685716},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js"],"names":["API","getAllPropertyVisuals","propertyVisualsApi","get","response","Error","getPropertyVisualsById","visuals_id","getPropertyVisualsByPropertyId","property_id","postPropertyVisuals","propertyVisuals","formData","FormData","files","file","append","name","description","created_by","updated_by","console","log","post","updateAPropertyVisual","put","deleteAPropertyVisual","delete"],"mappings":"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","sourcesContent":["import API from '../config/connections'\n// property visuals\nexport default {\n  // Returns all visuals where is_main = true\n  async getAllPropertyVisuals () {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-main-visual`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async getPropertyVisualsById (visuals_id) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/${visuals_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async getPropertyVisualsByPropertyId(property_id) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-by-property-id/${property_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async postPropertyVisuals (propertyVisuals) {\n    try {\n          if (propertyVisuals) {\n            let formData = new FormData();\n            for (let file of propertyVisuals.files) {\n              formData.append(\"file\", file, file.name);\n            }\n            formData.append(\"description\", propertyVisuals.description);\n            formData.append(\"property_id\", propertyVisuals.property_id);\n            formData.append(\"created_by\", propertyVisuals.created_by);\n            formData.append(\"updated_by\", propertyVisuals.updated_by);\n            console.log(formData);\n            const response = await API.propertyVisualsApi.post('/property-visuals', formData)\n            return response\n          } else {\n            console.log(\"there are no files.\");\n          }      \n    } catch (error) {\n      throw new Error('An error occured when sending data')\n    }\n  },\n  async updateAPropertyVisual (propertyVisuals) {\n    try {\n      const response = await API.propertyVisualsApi.put(`/property-visuals/${propertyVisuals.visuals_id}`, propertyVisuals)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when updating data')\n    }\n  },\n  async deleteAPropertyVisual (propertyVisuals) {\n    try {\n      const response = await API.propertyVisualsApi.delete(`/property-visuals/${propertyVisuals.visuals_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when deleting data')\n    }\n  }\n}\n"]}]}