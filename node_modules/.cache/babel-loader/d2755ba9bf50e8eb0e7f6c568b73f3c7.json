{"remainingRequest":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js!/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js","dependencies":[{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js","mtime":1628751506487},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tusimegodwin/Downloads/stanbic-properties/src/service/propertyVisuals.js"],"names":["API","getAllPropertyVisuals","propertyVisualsApi","get","response","Error","getLatestPropertyVisuals","getPropertyVisualsById","visuals_id","getUncertifiedPropertyVisualsByUsername","username","getListedPropertyVisualsByUsername","getUnlistedPropertyVisualsByUsername","updatePropertyVisualAvailabilityStatus","property_id","put","visualsResponse","propertyApi","propertyResponse","status","getPropertyVisualsByPropertyId","postPropertyVisuals","propertyVisuals","formData","FormData","files","file","append","name","description","created_by","updated_by","post","console","log","updateAPropertyVisual","deleteAPropertyVisual","delete"],"mappings":"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","sourcesContent":["import API from '../config/connections'\n// property visuals\nexport default {\n  // Returns all visuals where is_main = true\n  async getAllPropertyVisuals() {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-main-visual`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async getLatestPropertyVisuals() {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-latest-properties`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async getPropertyVisualsById(visuals_id) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/${visuals_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async getUncertifiedPropertyVisualsByUsername(username) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-uncertified-property-by-username/${username}`);\n      return response;\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n  async getListedPropertyVisualsByUsername(username) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-listed-property-by-username/${username}`);\n      return response;\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n  async getUnlistedPropertyVisualsByUsername(username) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-unlisted-property-by-username/${username}`);\n      return response;\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n  async updatePropertyVisualAvailabilityStatus(property_id){\n    try {\n      const visualsResponse = await API.propertyVisualsApi.put(`/property-visuals/property-visual-available-or-unavailable/${property_id}`);\n      const propertyResponse = await API.propertyApi.put(`/properties/change-property-available-status/${property_id}`);\n      if(\n        (visualsResponse.status === 200 || visualsResponse.status === 201) &&\n        (propertyResponse.status === 200 || propertyResponse.status === 201)\n        ){\n          return {\n            visualsResponse, propertyResponse\n          }\n        }\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n  async getPropertyVisualsByPropertyId(property_id) {\n    try {\n      const response = await API.propertyVisualsApi.get(`/property-visuals/display-by-property-id/${property_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async postPropertyVisuals(propertyVisuals) {\n    try {\n      if (propertyVisuals) {\n        let formData = new FormData();\n        for (let file of propertyVisuals.files) {\n          formData.append(\"file\", file, file.name);\n        }\n        formData.append(\"description\", propertyVisuals.description);\n        formData.append(\"property_id\", propertyVisuals.property_id);\n        formData.append(\"created_by\", propertyVisuals.created_by);\n        formData.append(\"updated_by\", propertyVisuals.updated_by);\n        const response = await API.propertyVisualsApi.post('/property-visuals', formData)\n        return response\n      } else {\n        console.log(\"there are no files.\");\n      }\n    } catch (error) {\n      throw new Error('An error occured when sending data')\n    }\n  },\n  async updateAPropertyVisual(propertyVisuals) {\n    try {\n      const response = await API.propertyVisualsApi.put(`/property-visuals/${propertyVisuals.visuals_id}`, propertyVisuals)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when updating data')\n    }\n  },\n  async deleteAPropertyVisual(propertyVisuals) {\n    try {\n      const response = await API.propertyVisualsApi.delete(`/property-visuals/${propertyVisuals.visuals_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when deleting data')\n    }\n  }\n}\n"]}]}