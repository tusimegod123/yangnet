{"remainingRequest":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js!/Users/tusimegodwin/Downloads/stanbic-properties/src/service/authService.js","dependencies":[{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/src/service/authService.js","mtime":1628751506486},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/stanbic-properties/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy90dXNpbWVnb2R3aW4vRG93bmxvYWRzL3N0YW5iaWMtcHJvcGVydGllcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IEFQSSBmcm9tICcuLi9jb25maWcvY29ubmVjdGlvbnMnOwpleHBvcnQgZGVmYXVsdCB7CiAgZ2V0Q3VycmVudExvZ2dlZGluVXNlckJ5SUQ6IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2dnZWRpblVzZXJCeUlEKHVzZXJfaWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBBUEkudXNlckFwaS5nZXQoIi91c2Vycy8iLmNvbmNhdCh1c2VyX2lkKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gZXJyb3Igb2NjdXJlZCB3aGVuIHJldHJpZXZpbmcgZGF0YScpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA3XV0pOwogICAgfSkpKCk7CiAgfSwKICBzaWdudXBBTmV3VXNlcjogZnVuY3Rpb24gc2lnbnVwQU5ld1VzZXIobmV3VXNlcikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBBUEkudXNlckFwaS5wb3N0KCcvdXNlcnMnLCBuZXdVc2VyKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA3OwogICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIGVycm9yIG9jY3VyZWQgd2hlbiBzZW5kaW5nIGRhdGEnKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCA3XV0pOwogICAgfSkpKCk7CiAgfSwKICBsb2dnaW5nVXNlcjogZnVuY3Rpb24gbG9nZ2luZ1VzZXIobG9naW5Vc2VyKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIEFQSS51c2VyQXBpLnBvc3QoJy9hdXRoZW50aWNhdGUnLCBsb2dpblVzZXIpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gZXJyb3Igb2NjdXJlZCB3aGVuIHNlbmRpbmcgZGF0YScpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSkoKTsKICB9LAogIGZldGNoTG9nZ2VkVXNlcjogZnVuY3Rpb24gZmV0Y2hMb2dnZWRVc2VyKHVzZXJuYW1lKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIEFQSS51c2VyQXBpLmdldCgiL3VzZXJzL3VzZXI/dXNlcm5hbWU9Ii5jb25jYXQodXNlcm5hbWUpKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA3OwogICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDQudDApOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGdldHRpbmcgdXNlciBkYXRhJyk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgN11dKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlVXNlclByb2ZpbGU6IGZ1bmN0aW9uIHVwZGF0ZVVzZXJQcm9maWxlKHVzZXIpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gQVBJLnVzZXJBcGkucHV0KCIvdXNlcnMvIi5jb25jYXQodXNlci51c2VyX2lkKSwgdXNlcik7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0NS5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDVbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ1LnQwKTsgLy8gdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cmVkIHdoZW4gdXBkYXRpbmcgZGF0YScpCgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUsIG51bGwsIFtbMCwgN11dKTsKICAgIH0pKSgpOwogIH0sCiAgZGVsZXRlQVVzZXJBY2NvdW50OiBmdW5jdGlvbiBkZWxldGVBVXNlckFjY291bnQodXNlcikgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBBUEkudXNlckFwaS5kZWxldGUoIi9wcm9wZXJ0eS1sb2NhdGlvbnMvIi5jb25jYXQodXNlci51c2VyX2lkKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dDYudDAgPSBfY29udGV4dDZbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cmVkIHdoZW4gZGVsZXRpbmcgZGF0YScpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU2LCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"sources":["/Users/tusimegodwin/Downloads/stanbic-properties/src/service/authService.js"],"names":["API","getCurrentLoggedinUserByID","user_id","userApi","get","response","Error","signupANewUser","newUser","post","loggingUser","loginUser","fetchLoggedUser","username","console","log","updateUserProfile","user","put","deleteAUserAccount","delete"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,uBAAhB;AAEA,eAAe;AACPC,EAAAA,0BADO,sCACqBC,OADrB,EAC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEhBF,GAAG,CAACG,OAAJ,CAAYC,GAAZ,kBAA0BF,OAA1B,EAFgB;;AAAA;AAEjCG,cAAAA,QAFiC;AAAA,+CAGhCA,QAHgC;;AAAA;AAAA;AAAA;AAAA,oBAKjC,IAAIC,KAAJ,CAAU,uCAAV,CALiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO1C,GARY;AASPC,EAAAA,cATO,0BASQC,OATR,EASiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEHR,GAAG,CAACG,OAAJ,CAAYM,IAAZ,CAAiB,QAAjB,EAA2BD,OAA3B,CAFG;;AAAA;AAEpBH,cAAAA,QAFoB;AAAA,gDAGnBA,QAHmB;;AAAA;AAAA;AAAA;AAAA,oBAKpB,IAAIC,KAAJ,CAAU,oCAAV,CALoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO7B,GAhBY;AAiBPI,EAAAA,WAjBO,uBAiBMC,SAjBN,EAiBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEHX,GAAG,CAACG,OAAJ,CAAYM,IAAZ,CAAiB,eAAjB,EAAkCE,SAAlC,CAFG;;AAAA;AAEpBN,cAAAA,QAFoB;AAAA,gDAGnBA,QAHmB;;AAAA;AAAA;AAAA;AAAA,oBAKpB,IAAIC,KAAJ,CAAU,oCAAV,CALoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO7B,GAxBY;AAyBPM,EAAAA,eAzBO,2BAyBSC,QAzBT,EAyBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEJb,GAAG,CAACG,OAAJ,CAAYC,GAAZ,gCAAwCS,QAAxC,EAFI;;AAAA;AAErBR,cAAAA,QAFqB;AAAA,gDAGpBA,QAHoB;;AAAA;AAAA;AAAA;AAK3BS,cAAAA,OAAO,CAACC,GAAR;AAL2B,oBAMrB,IAAIT,KAAJ,CAAU,yCAAV,CANqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9B,GAjCY;AAkCPU,EAAAA,iBAlCO,6BAkCYC,IAlCZ,EAkCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEJjB,GAAG,CAACG,OAAJ,CAAYe,GAAZ,kBAA0BD,IAAI,CAACf,OAA/B,GAA0Ce,IAA1C,CAFI;;AAAA;AAErBZ,cAAAA,QAFqB;AAAA,gDAGpBA,QAHoB;;AAAA;AAAA;AAAA;AAK3BS,cAAAA,OAAO,CAACC,GAAR,eAL2B,CAM3B;;AAN2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9B,GA1CY;AA2CPI,EAAAA,kBA3CO,8BA2CaF,IA3Cb,EA2CmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAELjB,GAAG,CAACG,OAAJ,CAAYiB,MAAZ,+BAA0CH,IAAI,CAACf,OAA/C,EAFK;;AAAA;AAEtBG,cAAAA,QAFsB;AAAA,gDAGrBA,QAHqB;;AAAA;AAAA;AAAA;AAAA,oBAKtB,IAAIC,KAAJ,CAAU,qCAAV,CALsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/B;AAlDY,CAAf","sourcesContent":["import API from '../config/connections'\n\nexport default {\n  async getCurrentLoggedinUserByID (user_id) {\n    try {\n      const response = await API.userApi.get(`/users/${user_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when retrieving data')\n    }\n  },\n  async signupANewUser(newUser) {\n    try {\n      const response = await API.userApi.post('/users', newUser)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when sending data')\n    }\n  },\n  async loggingUser (loginUser) {\n    try {\n      const response = await API.userApi.post('/authenticate', loginUser)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when sending data')\n    }\n  },\n  async fetchLoggedUser(username){\n    try {\n      const response = await API.userApi.get(`/users/user?username=${username}`)\n      return response\n    } catch (error) {\n      console.log(error);\n      throw new Error('An error occured when getting user data')\n    }\n  },\n  async updateUserProfile (user) {\n    try {\n      const response = await API.userApi.put(`/users/${user.user_id}`, user)\n      return response\n    } catch (error) {\n      console.log(error);\n      // throw new Error('An error occured when updating data')\n    }\n  },\n  async deleteAUserAccount (user) {\n    try {\n      const response = await API.userApi.delete(`/property-locations/${user.user_id}`)\n      return response\n    } catch (error) {\n      throw new Error('An error occured when deleting data')\n    }\n  }\n}\n"]}]}