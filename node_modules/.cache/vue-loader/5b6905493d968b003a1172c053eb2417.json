{"remainingRequest":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/src/components/ScopeComponent.vue?vue&type=template&id=8b6a828e&","dependencies":[{"path":"/Users/tusimegodwin/Downloads/yangnet-project/src/components/ScopeComponent.vue","mtime":1631590581318},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}