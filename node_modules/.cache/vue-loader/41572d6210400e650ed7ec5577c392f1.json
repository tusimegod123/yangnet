{"remainingRequest":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/src/components/AboutUs.vue?vue&type=template&id=4fd998ea&scoped=true&","dependencies":[{"path":"/Users/tusimegodwin/Downloads/yangnet-project/src/components/AboutUs.vue","mtime":1631595333649},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}