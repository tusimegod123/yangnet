{"remainingRequest":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tusimegodwin/Downloads/yangnet-project/src/components/GetInvolvedComponent.vue?vue&type=template&id=5fe74e20&","dependencies":[{"path":"/Users/tusimegodwin/Downloads/yangnet-project/src/components/GetInvolvedComponent.vue","mtime":1629882994069},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tusimegodwin/Downloads/yangnet-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}